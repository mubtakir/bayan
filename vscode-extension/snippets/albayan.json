{
  "Function": {
    "prefix": "fn",
    "body": [
      "fn ${1:name}(${2:params}) -> ${3:return_type} {",
      "    ${4:// function body}",
      "}"
    ],
    "description": "Function definition"
  },
  "Main Function": {
    "prefix": "main",
    "body": [
      "fn main() -> int {",
      "    ${1:// main function body}",
      "    return 0;",
      "}"
    ],
    "description": "Main function"
  },
  "Variable Declaration": {
    "prefix": "let",
    "body": [
      "let ${1:name} = ${2:value};"
    ],
    "description": "Variable declaration"
  },
  "Mutable Variable": {
    "prefix": "letmut",
    "body": [
      "let mut ${1:name} = ${2:value};"
    ],
    "description": "Mutable variable declaration"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if ${1:condition} {",
      "    ${2:// if body}",
      "}"
    ],
    "description": "If statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if ${1:condition} {",
      "    ${2:// if body}",
      "} else {",
      "    ${3:// else body}",
      "}"
    ],
    "description": "If-else statement"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while ${1:condition} {",
      "    ${2:// loop body}",
      "}"
    ],
    "description": "While loop"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for ${1:item} in ${2:iterable} {",
      "    ${3:// loop body}",
      "}"
    ],
    "description": "For loop"
  },
  "Struct Definition": {
    "prefix": "struct",
    "body": [
      "struct ${1:Name} {",
      "    ${2:field}: ${3:type},",
      "}"
    ],
    "description": "Struct definition"
  },
  "Enum Definition": {
    "prefix": "enum",
    "body": [
      "enum ${1:Name} {",
      "    ${2:Variant1},",
      "    ${3:Variant2},",
      "}"
    ],
    "description": "Enum definition"
  },
  "Match Expression": {
    "prefix": "match",
    "body": [
      "match ${1:expression} {",
      "    ${2:pattern} => ${3:result},",
      "    _ => ${4:default},",
      "}"
    ],
    "description": "Match expression"
  },
  "Logic Relation": {
    "prefix": "relation",
    "body": [
      "relation ${1:name}(${2:args});"
    ],
    "description": "Logic relation declaration"
  },
  "Logic Rule": {
    "prefix": "rule",
    "body": [
      "rule ${1:head} :- ${2:body}."
    ],
    "description": "Logic rule"
  },
  "Logic Fact": {
    "prefix": "fact",
    "body": [
      "fact ${1:predicate}(${2:args})."
    ],
    "description": "Logic fact"
  },
  "Logic Query": {
    "prefix": "query",
    "body": [
      "query ${1:goal}."
    ],
    "description": "Logic query"
  },
  "AI Model": {
    "prefix": "model",
    "body": [
      "model ${1:name} = load(\"${2:path}\");"
    ],
    "description": "AI model loading"
  },
  "Tensor Declaration": {
    "prefix": "tensor",
    "body": [
      "tensor<${1:type}> ${2:name} = ${3:value};"
    ],
    "description": "Tensor declaration"
  },
  "Neural Network": {
    "prefix": "neural",
    "body": [
      "neural ${1:name} {",
      "    input: ${2:input_size},",
      "    hidden: [${3:hidden_layers}],",
      "    output: ${4:output_size},",
      "}"
    ],
    "description": "Neural network definition"
  },
  "Train Model": {
    "prefix": "train",
    "body": [
      "train ${1:model} {",
      "    data: ${2:dataset},",
      "    epochs: ${3:100},",
      "    learning_rate: ${4:0.01},",
      "}"
    ],
    "description": "Model training"
  },
  "Async Function": {
    "prefix": "async",
    "body": [
      "async fn ${1:name}(${2:params}) -> ${3:return_type} {",
      "    ${4:// async function body}",
      "}"
    ],
    "description": "Async function"
  },
  "Channel": {
    "prefix": "channel",
    "body": [
      "let (${1:sender}, ${2:receiver}) = channel::<${3:type}>();"
    ],
    "description": "Channel creation"
  },
  "Mutex": {
    "prefix": "mutex",
    "body": [
      "let ${1:name} = Mutex::new(${2:value});"
    ],
    "description": "Mutex creation"
  },
  "Test Function": {
    "prefix": "test",
    "body": [
      "#[test]",
      "fn ${1:test_name}() {",
      "    ${2:// test body}",
      "    assert_eq!(${3:actual}, ${4:expected});",
      "}"
    ],
    "description": "Test function"
  },
  "Module": {
    "prefix": "mod",
    "body": [
      "mod ${1:name} {",
      "    ${2:// module content}",
      "}"
    ],
    "description": "Module definition"
  },
  "Use Statement": {
    "prefix": "use",
    "body": [
      "use ${1:path};"
    ],
    "description": "Use statement"
  },
  "Print": {
    "prefix": "print",
    "body": [
      "print(\"${1:message}\");"
    ],
    "description": "Print statement"
  },
  "Println": {
    "prefix": "println",
    "body": [
      "println(\"${1:message}\");"
    ],
    "description": "Print line statement"
  }
}
