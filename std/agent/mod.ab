// ============================================================================
// ðŸ“¦ ÙˆØ­Ø¯Ø© Ø§Ù„ÙˆÙƒÙŠÙ„ - Agent Module
// ============================================================================
// ØªØµØ¯ÙŠØ± Ø¬Ù…ÙŠØ¹ ÙˆØ­Ø¯Ø§Øª Ø§Ù„ÙˆÙƒÙŠÙ„

pub use types;
pub use nlu;
pub use nlg;
pub use optimizer;
pub use bridge;
pub use core;
pub use llm_wrapper;
pub use llm_nlu;
pub use llm_nlg;
pub use learning_engine;
pub use code_generator;
pub use code_validator;
pub use self_learner;
pub use internet_connector;
pub use self_evaluator;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø§Ù„Ø£Ù†ÙˆØ§Ø¹ Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©
// ============================================================================

pub type Intent = types::Intent;
pub type Response = types::Response;
pub type Config = types::Config;
pub type Event = types::Event;
pub type BayanAgent = types::BayanAgent;
pub type BayanBridge = bridge::BayanBridge;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø£Ù†ÙˆØ§Ø¹ LLM
// ============================================================================

pub type OllamaConfig = llm_wrapper::OllamaConfig;
pub type LLMResponse = llm_wrapper::LLMResponse;
pub type LLMCache = llm_wrapper::LLMCache;
pub type LLMMetrics = llm_wrapper::LLMMetrics;

pub type EnhancedIntent = llm_nlu::EnhancedIntent;
pub type NLUContext = llm_nlu::NLUContext;
pub type HybridNLUConfig = llm_nlu::HybridNLUConfig;
pub type NLUMetrics = llm_nlu::NLUMetrics;

pub type GeneratedResponse = llm_nlg::GeneratedResponse;
pub type ResponseTemplate = llm_nlg::ResponseTemplate;
pub type NLGConfig = llm_nlg::NLGConfig;
pub type NLGMetrics = llm_nlg::NLGMetrics;

pub type Interaction = learning_engine::Interaction;
pub type LearningPattern = learning_engine::LearningPattern;
pub type UserProfile = learning_engine::UserProfile;
pub type LearningMetrics = learning_engine::LearningMetrics;
pub type AdaptationStrategy = learning_engine::AdaptationStrategy;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø£Ù†ÙˆØ§Ø¹ Code Generator
// ============================================================================

pub type CodeTemplate = code_generator::CodeTemplate;
pub type GeneratedCode = code_generator::GeneratedCode;
pub type CodeGenConfig = code_generator::CodeGenConfig;
pub type CodeGenMetrics = code_generator::CodeGenMetrics;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø£Ù†ÙˆØ§Ø¹ Code Validator
// ============================================================================

pub type ValidationResult = code_validator::ValidationResult;
pub type CodeQuality = code_validator::CodeQuality;
pub type PerformanceMetrics = code_validator::PerformanceMetrics;
pub type CodeAnalysis = code_validator::CodeAnalysis;
pub type ValidationConfig = code_validator::ValidationConfig;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø£Ù†ÙˆØ§Ø¹ Self Learner
// ============================================================================

pub type SelfPlayGame = self_learner::SelfPlayGame;
pub type LearningExperience = self_learner::LearningExperience;
pub type Strategy = self_learner::Strategy;
pub type LearningProgress = self_learner::LearningProgress;
pub type SelfPlayConfig = self_learner::SelfPlayConfig;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø£Ù†ÙˆØ§Ø¹ Internet Connector
// ============================================================================

pub type InternetConnection = internet_connector::InternetConnection;
pub type DataSource = internet_connector::DataSource;
pub type FetchedData = internet_connector::FetchedData;
pub type KnowledgeUpdate = internet_connector::KnowledgeUpdate;
pub type InternetConfig = internet_connector::InternetConfig;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø£Ù†ÙˆØ§Ø¹ Self Evaluator
// ============================================================================

pub type PerformanceEvaluation = self_evaluator::PerformanceEvaluation;
pub type WeaknessAnalysis = self_evaluator::WeaknessAnalysis;
pub type ImprovementPlan = self_evaluator::ImprovementPlan;
pub type ProgressTracking = self_evaluator::ProgressTracking;
pub type EvaluationConfig = self_evaluator::EvaluationConfig;

// ============================================================================
// Ø¥Ø¹Ø§Ø¯Ø© ØªØµØ¯ÙŠØ± Ø§Ù„Ø¯ÙˆØ§Ù„ Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©
// ============================================================================

// Ø¯ÙˆØ§Ù„ Ø§Ù„Ø£Ù†ÙˆØ§Ø¹
pub fn create_intent(intent: string, target: string, code: string, hint: string) -> Intent {
    return types::create_intent(intent, target, code, hint);
}

pub fn create_response(intent: string, text: string, ok: bool) -> Response {
    return types::create_response(intent, text, ok);
}

pub fn create_config(language: string, dry_run: bool) -> Config {
    return types::create_config(language, dry_run);
}

pub fn create_agent(config: Config) -> BayanAgent {
    return types::create_agent(config);
}

// Ø¯ÙˆØ§Ù„ NLU
pub fn parse_intent(text: string) -> Intent {
    return nlu::parse_intent(text);
}

pub fn extract_path(text: string) -> string {
    return nlu::extract_path(text);
}

pub fn extract_code(text: string) -> string {
    return nlu::extract_code(text);
}

// Ø¯ÙˆØ§Ù„ NLG
pub fn generate_reply(language: string, intent: string, data: list<string>) -> string {
    return nlg::generate_reply(language, intent, data);
}

pub fn generate_welcome_message(language: string) -> string {
    return nlg::generate_welcome_message(language);
}

pub fn generate_help_message(language: string) -> string {
    return nlg::generate_help_message(language);
}

// Ø¯ÙˆØ§Ù„ Optimizer
pub fn observe_event(agent: mut BayanAgent, event: Event) {
    optimizer::observe_event(agent, event);
}

pub fn propose_optimizations(agent: BayanAgent) -> list<string> {
    return optimizer::propose_optimizations(agent);
}

pub fn get_event_summary(agent: BayanAgent) -> string {
    return optimizer::get_event_summary(agent);
}

// Ø¯ÙˆØ§Ù„ Bridge
pub fn create_bridge(binary_path: string, working_dir: string) -> BayanBridge {
    return bridge::create_bridge(binary_path, working_dir);
}

pub fn compile_file(bridge: BayanBridge, file_path: string) -> Response {
    return bridge::compile_file(bridge, file_path);
}

pub fn run_file(bridge: BayanBridge, file_path: string) -> Response {
    return bridge::run_file(bridge, file_path);
}

pub fn analyze_code(bridge: BayanBridge, code: string) -> Response {
    return bridge::analyze_code(bridge, code);
}

// Ø¯ÙˆØ§Ù„ Core
pub fn process_input(agent: mut BayanAgent, input: string, bayan_bridge: BayanBridge) -> Response {
    return core::process_input(agent, input, bayan_bridge);
}

pub fn get_welcome_message(agent: BayanAgent) -> string {
    return core::get_welcome_message(agent);
}

pub fn get_goodbye_message(agent: BayanAgent) -> string {
    return core::get_goodbye_message(agent);
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ LLM Wrapper
// ============================================================================

pub fn create_ollama_config(model_name: string, base_url: string, timeout: i32, max_tokens: i32) -> OllamaConfig {
    return llm_wrapper::create_ollama_config(model_name, base_url, timeout, max_tokens);
}

pub fn create_default_config() -> OllamaConfig {
    return llm_wrapper::create_default_config();
}

pub fn create_arabic_config() -> OllamaConfig {
    return llm_wrapper::create_arabic_config();
}

pub fn create_llm_cache(max_size: i32) -> LLMCache {
    return llm_wrapper::create_llm_cache(max_size);
}

pub fn create_llm_metrics() -> LLMMetrics {
    return llm_wrapper::create_llm_metrics();
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ LLM NLU
// ============================================================================

pub fn create_hybrid_nlu_config() -> HybridNLUConfig {
    return llm_nlu::create_hybrid_nlu_config();
}

pub fn create_nlu_context(language: string, domain: string) -> NLUContext {
    return llm_nlu::create_nlu_context(language, domain);
}

pub fn parse_intent_hybrid(input: string, context: NLUContext, config: HybridNLUConfig) -> EnhancedIntent {
    return llm_nlu::parse_intent_hybrid(input, context, config);
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ LLM NLG
// ============================================================================

pub fn create_nlg_config() -> NLGConfig {
    return llm_nlg::create_nlg_config();
}

pub fn generate_response_hybrid(intent: string, data: list<string>, context: string, language: string, config: NLGConfig) -> GeneratedResponse {
    return llm_nlg::generate_response_hybrid(intent, data, context, language, config);
}

pub fn create_nlg_metrics() -> NLGMetrics {
    return llm_nlg::create_nlg_metrics();
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ Learning Engine
// ============================================================================

pub fn create_user_profile(user_id: string) -> UserProfile {
    return learning_engine::create_user_profile(user_id);
}

pub fn create_learning_metrics() -> LearningMetrics {
    return learning_engine::create_learning_metrics();
}

pub fn get_user_accuracy(profile: UserProfile) -> f32 {
    return learning_engine::get_user_accuracy(profile);
}

pub fn predict_next_intent(profile: UserProfile, recent_intents: list<string>) -> string {
    return learning_engine::predict_next_intent(profile, recent_intents);
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ Code Generator
// ============================================================================

pub fn create_code_gen_config() -> CodeGenConfig {
    return code_generator::create_code_gen_config();
}

pub fn create_code_template(template_id: string, template_name: string, template_type: string, template_code: string, complexity: i32) -> CodeTemplate {
    return code_generator::create_code_template(template_id, template_name, template_type, template_code, complexity);
}

pub fn generate_test_case(function_name: string, input_values: list<string>, expected_output: string) -> GeneratedCode {
    return code_generator::generate_test_case(function_name, input_values, expected_output);
}

pub fn generate_example_code(example_name: string, description: string, code_snippet: string) -> GeneratedCode {
    return code_generator::generate_example_code(example_name, description, code_snippet);
}

pub fn generate_function_code(function_name: string, parameters: list<string>, return_type: string, body: string) -> GeneratedCode {
    return code_generator::generate_function_code(function_name, parameters, return_type, body);
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ Code Validator
// ============================================================================

pub fn create_validation_config() -> ValidationConfig {
    return code_validator::create_validation_config();
}

pub fn validate_syntax(code: string) -> ValidationResult {
    return code_validator::validate_syntax(code);
}

pub fn validate_semantics(code: string) -> ValidationResult {
    return code_validator::validate_semantics(code);
}

pub fn calculate_code_quality(code: string) -> CodeQuality {
    return code_validator::calculate_code_quality(code);
}

pub fn analyze_code(code: string, config: ValidationConfig) -> CodeAnalysis {
    return code_validator::analyze_code(code, config);
}

pub fn is_code_valid(analysis: CodeAnalysis) -> bool {
    return code_validator::is_code_valid(analysis);
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ Self Learner
// ============================================================================

pub fn create_self_play_config() -> SelfPlayConfig {
    return self_learner::create_self_play_config();
}

pub fn create_strategy(strategy_id: string, strategy_name: string, description: string) -> Strategy {
    return self_learner::create_strategy(strategy_id, strategy_name, description);
}

pub fn create_learning_progress() -> LearningProgress {
    return self_learner::create_learning_progress();
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ Internet Connector
// ============================================================================

pub fn create_internet_config() -> InternetConfig {
    return internet_connector::create_internet_config();
}

pub fn check_internet_connection() -> InternetConnection {
    return internet_connector::check_internet_connection();
}

pub fn create_data_source(source_id: string, source_name: string, source_url: string, source_type: string) -> DataSource {
    return internet_connector::create_data_source(source_id, source_name, source_url, source_type);
}

// ============================================================================
// Ø¯ÙˆØ§Ù„ Self Evaluator
// ============================================================================

pub fn create_evaluation_config() -> EvaluationConfig {
    return self_evaluator::create_evaluation_config();
}

pub fn evaluate_performance(accuracy: f32, efficiency: f32, reliability: f32, learning: f32) -> PerformanceEvaluation {
    return self_evaluator::evaluate_performance(accuracy, efficiency, reliability, learning);
}

pub fn generate_evaluation_report(eval: PerformanceEvaluation) -> string {
    return self_evaluator::generate_evaluation_report(eval);
}

// ============================================================================
// Ù†Ù‡Ø§ÙŠØ© ÙˆØ­Ø¯Ø© Ø§Ù„ÙˆÙƒÙŠÙ„
// ============================================================================
