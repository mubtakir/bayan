// ============================================================================
// ๐ ูุญุฏุฉ ุฌุณุฑ ุงูุชูุงูู - Bridge Module
// ============================================================================
// ุงูุชูุงูู ูุน ูุชุฑุฌู ุงูุจูุงู ูุงูุชูููุฐ

use types;

// ============================================================================
// 1. ูููู ุฌุณุฑ ุงูุจูุงู
// ============================================================================

struct BayanBridge {
    binary_path: string,
    working_dir: string,
}

// ============================================================================
// 2. ุฅูุดุงุก ุฌุณุฑ ุฌุฏูุฏ
// ============================================================================

fn create_bridge(binary_path: string, working_dir: string) -> BayanBridge {
    return BayanBridge {
        binary_path: binary_path,
        working_dir: working_dir,
    };
}

// ============================================================================
// 3. ุชุฑุฌูุฉ ููู
// ============================================================================

fn compile_file(bridge: BayanBridge, file_path: string) -> Response {
    // ูุญุงูุงุฉ ุงุณุชุฏุนุงุก ุงููุชุฑุฌู
    // ูู ุงููุงูุนุ ุณูุชู ุงุณุชุฏุนุงุก ุงูุจุฑูุงูุฌ ุงูุชูููุฐู ุนุจุฑ FFI

    let response = types::create_response("compile", "", false);

    // ุงูุชุญูู ูู ูุฌูุฏ ุงูููู
    if !file_path.contains(".ab") {
        response.text = "โ ุงูููู ูุฌุจ ุฃู ููุชูู ุจู .ab";
        return response;
    }

    // ูุญุงูุงุฉ ุงูุชุฑุฌูุฉ ุงููุงุฌุญุฉ
    response.text = "โ ุชู ุชุฑุฌูุฉ ุงูููู ุจูุฌุงุญ: " + file_path;
    response.ok = true;
    response.data.push("Compilation successful");

    return response;
}

// ============================================================================
// 4. ุชุดุบูู ููู
// ============================================================================

fn run_file(bridge: BayanBridge, file_path: string) -> Response {
    let response = types::create_response("run", "", false);

    // ุงูุชุญูู ูู ูุฌูุฏ ุงูููู
    if !file_path.contains(".ab") {
        response.text = "โ ุงูููู ูุฌุจ ุฃู ููุชูู ุจู .ab";
        return response;
    }

    // ูุญุงูุงุฉ ุงูุชุดุบูู ุงููุงุฌุญ
    response.text = "โ ุชู ุชุดุบูู ุงูููู ุจูุฌุงุญ: " + file_path;
    response.ok = true;
    response.data.push("Program executed successfully");

    return response;
}

// ============================================================================
// 5. ุชุญููู ุงูููุฏ
// ============================================================================

fn analyze_code(bridge: BayanBridge, code: string) -> Response {
    let response = types::create_response("analyze", "", false);

    // ุงูุชุญูู ูู ุฃู ุงูููุฏ ููุณ ูุงุฑุบุงู
    if code.len() == 0 {
        response.text = "โ ุงูููุฏ ูุงุฑุบ";
        return response;
    }

    // ูุญุงูุงุฉ ุงูุชุญููู ุงููุงุฌุญ
    response.text = "โ ุชู ุชุญููู ุงูููุฏ ุจูุฌุงุญ";
    response.ok = true;

    // ุฅุถุงูุฉ ูุนูููุงุช ุงูุชุญููู
    if code.contains("fn ") {
        response.data.push("Found function definition");
    }
    if code.contains("struct ") {
        response.data.push("Found struct definition");
    }
    if code.contains("let ") {
        response.data.push("Found variable declaration");
    }

    return response;
}

// ============================================================================
// 6. ุงูุชุญูู ูู ุตุญุฉ ุงูููู
// ============================================================================

fn validate_file(bridge: BayanBridge, file_path: string) -> bool {
    if file_path.len() == 0 {
        return false;
    }

    if !file_path.contains(".ab") {
        return false;
    }

    return true;
}

// ============================================================================
// 7. ุงูุชุญูู ูู ุตุญุฉ ุงูููุฏ
// ============================================================================

fn validate_code(bridge: BayanBridge, code: string) -> bool {
    if code.len() == 0 {
        return false;
    }

    // ุงูุชุญูู ูู ุงูุฃููุงุณ ุงููุชุทุงุจูุฉ
    let open_braces = 0;
    let i = 0;

    while i < code.len() {
        let char = code.substring(i, i + 1);
        if char == "{" {
            open_braces = open_braces + 1;
        } else if char == "}" {
            open_braces = open_braces - 1;
        }
        i = i + 1;
    }

    if open_braces != 0 {
        return false;
    }

    return true;
}

// ============================================================================
// 8. ุงูุญุตูู ุนูู ูุนูููุงุช ุงููุชุฑุฌู
// ============================================================================

fn get_compiler_info(bridge: BayanBridge) -> string {
    return "AlBayan Compiler v0.1.0\nBinary: " + bridge.binary_path + "\nWorking Dir: " + bridge.working_dir;
}

// ============================================================================
// 9. ุงูุชุญูู ูู ุชููุฑ ุงููุชุฑุฌู
// ============================================================================

fn is_compiler_available(bridge: BayanBridge) -> bool {
    // ูู ุงููุงูุนุ ุณูุชู ุงูุชุญูู ูู ูุฌูุฏ ุงูููู ุงูุชูููุฐู
    // ููุง ููุชุฑุถ ุฃูู ูุชุงุญ
    return true;
}

// ============================================================================
// ููุงูุฉ ูุญุฏุฉ Bridge
// ============================================================================

