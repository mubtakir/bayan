// اختبار شامل لجميع ميزات لغة البيان
// Comprehensive Test of AlBayan Language Features

// ============================================
// 1. STRUCT DEFINITIONS
// ============================================

struct Point {
    x: int;
    y: int;
}

struct Person {
    name: string;
    age: int;
}

// ============================================
// 2. UTILITY FUNCTIONS
// ============================================

fn add(a: int, b: int) -> int {
    return a + b;
}

fn multiply(x: int, y: int) -> int {
    return x * y;
}

fn square(n: int) -> int {
    return n * n;
}

fn factorial(n: int) -> int {
    let result = 1;
    let i = 1;
    while i <= n {
        result = result * i;
        i = i + 1;
    }
    return result;
}

fn max(a: int, b: int) -> int {
    if a > b {
        return a;
    } else {
        return b;
    }
}

fn abs_value(n: int) -> int {
    if n < 0 {
        return -n;
    } else {
        return n;
    }
}

fn classify(n: int) -> int {
    match n {
        0 => { return 0; }
        1 => { return 1; }
        2 => { return 2; }
        _ => { return -1; }
    }
}

// ============================================
// 3. MAIN FUNCTION - COMPREHENSIVE TEST
// ============================================

fn main() -> int {
    // Test 1: Basic Arithmetic
    let a = 10;
    let b = 20;
    let sum = a + b;
    let product = a * b;
    let diff = b - a;

    // Test 2: Function Calls
    let add_result = add(5, 15);
    let mult_result = multiply(3, 4);
    let sq_result = square(5);

    // Test 3: Nested Function Calls
    let nested = add(multiply(2, 3), square(2));
    let complex = add(square(3), multiply(4, 5));

    // Test 4: Conditionals
    let max_result = max(10, 20);
    let abs_result = abs_value(-5);

    // Test 5: Loops
    let fact_result = factorial(5);
    let sum_loop = 0;
    let i = 1;
    while i <= 10 {
        sum_loop = sum_loop + i;
        i = i + 1;
    }

    // Test 6: Arrays
    let arr = [1, 2, 3, 4, 5];
    let first = arr[0];
    let second = arr[1];
    let arr_sum = first + second;

    // Test 7: Structs
    let p1 = Point { x: 10, y: 20 };
    let x_coord = p1.x;
    let y_coord = p1.y;
    let point_sum = x_coord + y_coord;

    // Test 8: Match Expressions
    let match_result = classify(1);

    // Test 9: Complex Expressions
    let complex_expr = (a + b) * (b - a) / 2;
    let logical_and = a > 5 && b < 30;
    let logical_or = a < 5 || b > 15;

    // Test 10: Multiple Operations
    let mult_fact = multiply(fact_result, 2);
    let sq_max = square(max_result);
    let final_result = add(mult_fact, sq_max);

    return final_result;
}
