// لماذا لغة البيان؟ - مثال عملي بسيط
// Why AlBayan? - Simple Practical Example

// ========== مثال 1: حاسبة بسيطة ==========

// دالة الجمع
fn add(a: int, b: int) -> int {
    return a + b;
}

// دالة الطرح
fn subtract(a: int, b: int) -> int {
    return a - b;
}

// دالة الضرب
fn multiply(a: int, b: int) -> int {
    return a * b;
}

// دالة القسمة
fn divide(a: int, b: int) -> int {
    if b != 0 {
        return a / b;
    }
    return 0;
}

// دالة حساب المربع
fn square(x: int) -> int {
    return multiply(x, x);
}

// دالة حساب المكعب
fn cube(x: int) -> int {
    let x_squared = x * x;
    return x_squared * x;
}

// ========== مثال 2: تحويل الوحدات ==========

// تحويل من سلسيوس إلى فهرنهايت
fn celsius_to_fahrenheit(celsius: int) -> int {
    return celsius * 9 / 5 + 32;
}

// تحويل من متر إلى سنتيمتر
fn meters_to_cm(meters: int) -> int {
    return multiply(meters, 100);
}

// تحويل من ساعات إلى دقائق
fn hours_to_minutes(hours: int) -> int {
    return multiply(hours, 60);
}

// تحويل من كيلوجرام إلى جرام
fn kg_to_grams(kg: int) -> int {
    return multiply(kg, 1000);
}

// ========== مثال 3: العمليات المالية ==========

// حساب الفائدة البسيطة
fn simple_interest(principal: int, rate: int, time: int) -> int {
    return multiply(multiply(principal, rate), time) / 100;
}

// حساب الخصم
fn calculate_discount(price: int, discount_percent: int) -> int {
    return multiply(price, discount_percent) / 100;
}

// حساب السعر بعد الخصم
fn price_after_discount(original_price: int, discount_percent: int) -> int {
    let discount_amount = calculate_discount(original_price, discount_percent);
    return subtract(original_price, discount_amount);
}

// حساب الضريبة
fn calculate_tax(amount: int, tax_rate: int) -> int {
    return multiply(amount, tax_rate) / 100;
}

// حساب السعر النهائي مع الضريبة
fn final_price_with_tax(price: int, tax_rate: int) -> int {
    let tax_amount = calculate_tax(price, tax_rate);
    return add(price, tax_amount);
}

// ========== مثال 4: العمليات الإحصائية ==========

// حساب المتوسط لرقمين
fn average_two(a: int, b: int) -> int {
    return add(a, b) / 2;
}

// حساب المتوسط لثلاثة أرقام
fn average_three(a: int, b: int, c: int) -> int {
    return add(add(a, b), c) / 3;
}

// إيجاد الأكبر بين رقمين
fn max_two(a: int, b: int) -> int {
    if a > b {
        return a;
    }
    return b;
}

// إيجاد الأصغر بين رقمين
fn min_two(a: int, b: int) -> int {
    if a < b {
        return a;
    }
    return b;
}

// إيجاد الأكبر بين ثلاثة أرقام
fn max_three(a: int, b: int, c: int) -> int {
    let max_ab = max_two(a, b);
    return max_two(max_ab, c);
}

// إيجاد الأصغر بين ثلاثة أرقام
fn min_three(a: int, b: int, c: int) -> int {
    let min_ab = min_two(a, b);
    return min_two(min_ab, c);
}

// ========== مثال 5: التصنيف والتقييم ==========

// تصنيف الدرجات
fn classify_grade(score: int) -> string {
    if score >= 90 {
        return "ممتاز";
    }
    if score >= 80 {
        return "جيد جداً";
    }
    if score >= 70 {
        return "جيد";
    }
    if score >= 60 {
        return "مقبول";
    }
    return "راسب";
}

// تصنيف العمر
fn classify_age(age: int) -> string {
    if age >= 60 {
        return "كبار السن";
    }
    if age >= 30 {
        return "بالغ";
    }
    if age >= 18 {
        return "شاب";
    }
    if age >= 13 {
        return "مراهق";
    }
    return "طفل";
}

// تصنيف الراتب
fn classify_salary(salary: int) -> string {
    if salary >= 15000 {
        return "مرتفع";
    }
    if salary >= 10000 {
        return "متوسط عالي";
    }
    if salary >= 7000 {
        return "متوسط";
    }
    if salary >= 4000 {
        return "منخفض";
    }
    return "أقل من المتوسط";
}

// تقييم الأداء
fn evaluate_performance(quality: int, speed: int, teamwork: int) -> string {
    let total_score = add(add(quality, speed), teamwork);
    let average_score = total_score / 3;
    
    if average_score >= 90 {
        return "متميز";
    }
    if average_score >= 80 {
        return "ممتاز";
    }
    if average_score >= 70 {
        return "جيد";
    }
    if average_score >= 60 {
        return "مقبول";
    }
    return "يحتاج تحسين";
}

// ========== مثال 6: العمليات المنطقية ==========

// فحص الرقم الموجب
fn is_positive(number: int) -> bool {
    return number > 0;
}

// فحص الرقم السالب
fn is_negative(number: int) -> bool {
    return number < 0;
}

// فحص الرقم الزوجي
fn is_even(number: int) -> bool {
    return number / 2 * 2 == number;
}

// فحص الرقم الفردي
fn is_odd(number: int) -> bool {
    return !is_even(number);
}

// فحص المساواة
fn is_equal(a: int, b: int) -> bool {
    return a == b;
}

// فحص أكبر من
fn is_greater(a: int, b: int) -> bool {
    return a > b;
}

// ========== الدالة الرئيسية ==========

fn main() -> int {
    // اختبار العمليات الحسابية
    let num1 = 15;
    let num2 = 8;
    
    let sum_result = add(num1, num2);
    let diff_result = subtract(num1, num2);
    let mult_result = multiply(num1, num2);
    let div_result = divide(num1, num2);
    
    // اختبار التحويلات
    let temp_celsius = 25;
    let temp_fahrenheit = celsius_to_fahrenheit(temp_celsius);
    let distance_meters = 5;
    let distance_cm = meters_to_cm(distance_meters);
    
    // اختبار العمليات المالية
    let principal = 10000;
    let rate = 5;
    let time = 2;
    let interest = simple_interest(principal, rate, time);
    
    let original_price = 1000;
    let discount_rate = 15;
    let discounted_price = price_after_discount(original_price, discount_rate);
    
    // اختبار الإحصائيات
    let score1 = 85;
    let score2 = 92;
    let score3 = 78;
    
    let avg_two = average_two(score1, score2);
    let avg_three = average_three(score1, score2, score3);
    let max_score = max_three(score1, score2, score3);
    let min_score = min_three(score1, score2, score3);
    
    // اختبار التصنيف
    let student_grade = 87;
    let grade_classification = classify_grade(student_grade);
    
    let employee_age = 28;
    let age_classification = classify_age(employee_age);
    
    let monthly_salary = 8500;
    let salary_classification = classify_salary(monthly_salary);
    
    // اختبار تقييم الأداء
    let quality_score = 88;
    let speed_score = 85;
    let teamwork_score = 90;
    let performance = evaluate_performance(quality_score, speed_score, teamwork_score);
    
    // اختبار العمليات المنطقية
    let test_number = 42;
    let is_pos = is_positive(test_number);
    let is_even_num = is_even(test_number);
    let is_greater_than_50 = is_greater(test_number, 50);
    
    // حساب النتيجة الإجمالية
    let final_result = sum_result + mult_result + interest + avg_three + max_score;
    
    return final_result;
}
