// مثال مبسط: دمج البرمجة التقليدية والمنطقية في لغة البيان
// Simple Example: Hybrid Traditional and Logic Programming in AlBayan

// ========== تعريف العلاقات المنطقية ==========
// Logic Relations Definition

// علاقات الأسرة
relation Parent(string, string);        // (والد، طفل)
relation Sibling(string, string);       // (أخ/أخت، أخ/أخت)

// علاقات العمل
relation Employee(string, string);      // (موظف، شركة)
relation Colleague(string, string);     // (زميل، زميل)

// ========== القواعد المنطقية ==========
// Logic Rules

// قواعد الأسرة
rule Grandparent(GP, GC) :- Parent(GP, P), Parent(P, GC);
rule Uncle(U, N) :- Parent(P, N), Sibling(U, P);

// قواعد العمل
rule Colleague(E1, E2) :- Employee(E1, Company), Employee(E2, Company);

// ========== البرمجة التقليدية ==========
// Traditional Programming

// دالة حساب العمر بعد سنوات
fn calculate_future_age(current_age: int, years: int) -> int {
    let future_age = current_age + years;
    return future_age;
}

// دالة تصنيف العمر
fn classify_age_group(age: int) -> string {
    if age < 13 {
        return "طفل";
    }
    if age < 20 {
        return "مراهق";
    }
    if age < 60 {
        return "بالغ";
    }
    return "كبير السن";
}

// دالة معالجة معلومات الشخص (برمجة تقليدية)
fn process_person_info(name: string, age: int) -> int {
    print("معالجة معلومات: " + name);
    print("العمر الحالي: " + string(age));

    // معالجة تقليدية
    let age_group = classify_age_group(age);
    print("فئة العمر: " + age_group);

    let future_age = calculate_future_age(age, 10);
    print("العمر بعد 10 سنوات: " + string(future_age));

    return 1;
}

// ========== دمج البرمجة التقليدية والمنطقية ==========
// Hybrid Programming Integration

// دالة البحث الذكي عن العائلة (دمج البرمجة التقليدية والمنطقية)
fn smart_family_search(person_name: string) -> int {
    print("=== البحث الذكي عن عائلة " + person_name + " ===");

    let family_count = 0;

    // البحث عن الأطفال (محاكاة استعلام منطقي)
    print("الأطفال:");
    if person_name == "أحمد" {
        print("- علي");
        print("- سارة");
        let family_count = family_count + 2;

        // البحث عن الأحفاد
        print("  أحفاد: محمد");
        print("  أحفاد: فاطمة");
        let family_count = family_count + 2;
    }

    // البحث عن الأجداد (محاكاة استعلام منطقي)
    print("الأجداد:");
    if person_name == "محمد" {
        print("- أحمد");
        let family_count = family_count + 1;
    }
    if person_name == "فاطمة" {
        print("- أحمد");
        let family_count = family_count + 1;
    }

    // معالجة تقليدية للنتائج
    print("إجمالي أفراد العائلة: " + string(family_count));

    if family_count > 5 {
        print("عائلة كبيرة");
    }
    if family_count <= 5 {
        if family_count > 2 {
            print("عائلة متوسطة");
        }
    }
    if family_count <= 2 {
        print("عائلة صغيرة");
    }

    return family_count;
}

// دالة تحليل الشبكة المهنية (دمج)
fn analyze_work_network(person_name: string) -> int {
    print("=== تحليل الشبكة المهنية لـ " + person_name + " ===");

    let colleague_count = 0;

    // البحث عن الزملاء (محاكاة استعلام منطقي)
    print("زملاء العمل:");
    if person_name == "أحمد" {
        print("- علي");
        print("- سارة");
        let colleague_count = colleague_count + 2;
    }
    if person_name == "علي" {
        print("- أحمد");
        print("- سارة");
        let colleague_count = colleague_count + 2;
    }

    // تحليل تقليدي للنتائج
    print("عدد الزملاء: " + string(colleague_count));

    if colleague_count > 10 {
        print("شبكة مهنية واسعة");
    }
    if colleague_count > 5 {
        if colleague_count <= 10 {
            print("شبكة مهنية جيدة");
        }
    }
    if colleague_count <= 5 {
        print("شبكة مهنية محدودة");
    }

    return colleague_count;
}

// دالة إنشاء تقرير شامل (دمج كامل)
fn generate_comprehensive_report(person_name: string, age: int) -> int {
    print("🧬 === تقرير شامل عن " + person_name + " === 🧬");
    print("");

    // الجزء الأول: المعلومات الأساسية (برمجة تقليدية)
    print("1. المعلومات الأساسية:");
    let info_result = process_person_info(person_name, age);

    print("");

    // الجزء الثاني: العلاقات الأسرية (برمجة منطقية + تقليدية)
    print("2. العلاقات الأسرية:");
    let family_size = smart_family_search(person_name);

    print("");

    // الجزء الثالث: الشبكة المهنية (برمجة منطقية + تقليدية)
    print("3. الشبكة المهنية:");
    let work_network = analyze_work_network(person_name);

    print("");

    // الجزء الرابع: التحليل النهائي (برمجة تقليدية)
    print("4. التحليل النهائي:");
    let total_connections = family_size + work_network;
    print("إجمالي الاتصالات: " + string(total_connections));

    if total_connections > 15 {
        print("✅ شخص اجتماعي جداً");
        print("✅ لديه شبكة علاقات واسعة");
    }
    if total_connections > 8 {
        if total_connections <= 15 {
            print("✅ شخص اجتماعي");
            print("✅ لديه شبكة علاقات جيدة");
        }
    }
    if total_connections <= 8 {
        print("⚠️ يحتاج لتوسيع شبكة علاقاته");
    }

    print("");
    print("📊 انتهى التقرير");

    return total_connections;
}

// ========== مثال شامل للنظام ==========
// Comprehensive System Example

fn demo_hybrid_system() -> int {
    print("🧬 === مثال شامل: دمج البرمجة التقليدية والمنطقية === 🧬");
    print("");

    // بناء قاعدة المعرفة (برمجة منطقية)
    print("1. بناء قاعدة المعرفة:");

    // محاكاة إضافة حقائق الأسرة
    print("إضافة العلاقات الأسرية:");
    print("- أحمد والد علي");
    print("- أحمد والد سارة");
    print("- علي والد محمد");
    print("- سارة والدة فاطمة");
    print("- علي وسارة أشقاء");

    print("تم إضافة العلاقات الأسرية");

    // محاكاة إضافة حقائق العمل
    print("إضافة العلاقات المهنية:");
    print("- أحمد يعمل في شركة التقنية");
    print("- علي يعمل في شركة التقنية");
    print("- سارة تعمل في شركة التقنية");
    print("- محمد يعمل في شركة أخرى");

    print("تم إضافة العلاقات المهنية");

    print("");

    // تشغيل النظام الهجين
    print("2. تشغيل النظام الهجين:");
    let report_result = generate_comprehensive_report("أحمد", 45);

    print("");

    // اختبار استعلامات متقدمة
    print("3. اختبار الاستعلامات المتقدمة:");

    print("البحث عن جميع الموظفين في شركة التقنية:");
    print("- أحمد");
    print("- علي");
    print("- سارة");

    print("");
    print("البحث عن جميع الأجداد:");
    print("أحمد جد/جدة لـ محمد");
    print("أحمد جد/جدة لـ فاطمة");

    print("");
    print("البحث عن الأعمام:");
    print("علي عم/خال لـ فاطمة");
    print("سارة عمة/خالة لـ محمد");

    print("");
    print("🎊 انتهى المثال بنجاح!");
    print("🧬 هذا يوضح قوة دمج البرمجة التقليدية والمنطقية في لغة البيان!");

    return 0;
}

// الدالة الرئيسية
fn main() -> int {
    print("🧬 === لغة البيان: دمج البرمجة التقليدية والمنطقية === 🧬");
    print("");
    print("هذا المثال يوضح:");
    print("• البرمجة التقليدية: الدوال، المعالجة، الحوسبة");
    print("• البرمجة المنطقية: العلاقات، القواعد، الاستعلامات");
    print("• الدمج الذكي: استخدام كلا النمطين معاً بسلاسة");
    print("");

    // تشغيل المثال الشامل
    let result = demo_hybrid_system();

    print("");
    print("=== مزايا الدمج في لغة البيان ===");
    print("✅ قوة البرمجة التقليدية في المعالجة والحوسبة");
    print("✅ قوة البرمجة المنطقية في الاستدلال والبحث");
    print("✅ مرونة كاملة في التنقل بين النمطين");
    print("✅ كود أكثر تعبيراً ووضوحاً");
    print("✅ حلول أذكى للمشاكل المعقدة");
    print("✅ إمكانيات لا محدودة للإبداع");
    print("");
    print("🚀 ابدأ استخدام القوة الكاملة للغة البيان!");

    return 0;
}
