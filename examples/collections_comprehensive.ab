// مثال شامل للقوائم والمجموعات في لغة البيان
// Comprehensive Collections Example in AlBayan

// ========== القوائم والمصفوفات ==========
// Lists and Arrays

// مثال شامل للقوائم
fn comprehensive_lists_example() -> int {
    print("📋 === القوائم والمصفوفات الشاملة ===");
    print("");
    
    // إنشاء قوائم مختلفة الأنواع
    print("🔢 === إنشاء القوائم ===");
    
    // قائمة الأعداد الصحيحة
    let numbers: Vec<int> = vec![1, 2, 3, 4, 5, 10, 15, 20];
    print("📊 قائمة الأعداد: " + format_int_list(numbers));
    
    // قائمة الأعداد العشرية
    let prices: Vec<float> = vec![10.5, 25.99, 100.0, 75.25, 50.0];
    print("💰 قائمة الأسعار: " + format_float_list(prices));
    
    // قائمة النصوص
    let names: Vec<string> = vec!["أحمد", "فاطمة", "محمد", "عائشة", "علي"];
    print("👥 قائمة الأسماء: " + format_string_list(names));
    
    // قائمة القيم المنطقية
    let flags: Vec<bool> = vec![true, false, true, true, false];
    print("🚩 قائمة الأعلام: " + format_bool_list(flags));
    
    print("");
    
    // عمليات القوائم الأساسية
    print("🔧 === عمليات القوائم الأساسية ===");
    
    // الطول
    print("📏 طول قائمة الأعداد: " + string(numbers.len()));
    print("📏 طول قائمة الأسماء: " + string(names.len()));
    
    // الوصول للعناصر
    if numbers.len() > 0 {
        print("🎯 أول عدد: " + string(numbers[0]));
        print("🎯 آخر عدد: " + string(numbers[numbers.len() - 1]));
    }
    
    if names.len() > 0 {
        print("👤 أول اسم: " + names[0]);
        print("👤 آخر اسم: " + names[names.len() - 1]);
    }
    
    print("");
    
    // البحث في القوائم
    print("🔍 === البحث في القوائم ===");
    
    let search_number = 10;
    let found_number = search_in_int_list(numbers, search_number);
    if found_number {
        print("✅ تم العثور على العدد " + string(search_number));
    } else {
        print("❌ لم يتم العثور على العدد " + string(search_number));
    }
    
    let search_name = "فاطمة";
    let found_name = search_in_string_list(names, search_name);
    if found_name {
        print("✅ تم العثور على الاسم " + search_name);
    } else {
        print("❌ لم يتم العثور على الاسم " + search_name);
    }
    
    print("");
    
    // الترتيب
    print("📊 === ترتيب القوائم ===");
    let sorted_numbers = sort_int_list(numbers);
    print("🔢 الأعداد مرتبة: " + format_int_list(sorted_numbers));
    
    let sorted_names = sort_string_list(names);
    print("📝 الأسماء مرتبة: " + format_string_list(sorted_names));
    
    print("");
    
    // التصفية
    print("🔍 === تصفية القوائم ===");
    let large_numbers = filter_large_numbers(numbers, 5);
    print("🔢 الأعداد الكبيرة (> 5): " + format_int_list(large_numbers));
    
    let expensive_items = filter_expensive_prices(prices, 50.0);
    print("💰 الأسعار المرتفعة (> 50): " + format_float_list(expensive_items));
    
    let long_names = filter_long_names(names, 4);
    print("📝 الأسماء الطويلة (> 4 أحرف): " + format_string_list(long_names));
    
    return 0;
}

// ========== المجموعات والخرائط ==========
// Sets and Maps

// مثال شامل للمجموعات
fn comprehensive_sets_example() -> int {
    print("🗂️ === المجموعات والخرائط ===");
    print("");
    
    // مجموعة الأعداد الفريدة
    print("🔢 === مجموعة الأعداد الفريدة ===");
    let numbers_with_duplicates: Vec<int> = vec![1, 2, 3, 2, 4, 1, 5, 3, 6];
    let unique_numbers = create_unique_set(numbers_with_duplicates);
    print("📊 الأعداد الأصلية: " + format_int_list(numbers_with_duplicates));
    print("✨ الأعداد الفريدة: " + format_int_list(unique_numbers));
    
    print("");
    
    // مجموعة الكلمات الفريدة
    print("📝 === مجموعة الكلمات الفريدة ===");
    let words_with_duplicates: Vec<string> = vec!["كتاب", "قلم", "كتاب", "مكتب", "قلم", "حاسوب"];
    let unique_words = create_unique_string_set(words_with_duplicates);
    print("📚 الكلمات الأصلية: " + format_string_list(words_with_duplicates));
    print("✨ الكلمات الفريدة: " + format_string_list(unique_words));
    
    print("");
    
    // عمليات المجموعات
    print("🔧 === عمليات المجموعات ===");
    let set1: Vec<int> = vec![1, 2, 3, 4, 5];
    let set2: Vec<int> = vec![4, 5, 6, 7, 8];
    
    print("📊 المجموعة الأولى: " + format_int_list(set1));
    print("📊 المجموعة الثانية: " + format_int_list(set2));
    
    // التقاطع
    let intersection = set_intersection(set1, set2);
    print("🔗 التقاطع: " + format_int_list(intersection));
    
    // الاتحاد
    let union = set_union(set1, set2);
    print("🔗 الاتحاد: " + format_int_list(union));
    
    // الفرق
    let difference = set_difference(set1, set2);
    print("🔗 الفرق (الأولى - الثانية): " + format_int_list(difference));
    
    return 0;
}

// ========== الخرائط والقواميس ==========
// Maps and Dictionaries

// هيكل بيانات للخريطة
struct KeyValuePair {
    key: string,
    value: string
}

struct StringMap {
    pairs: Vec<KeyValuePair>
}

// مثال شامل للخرائط
fn comprehensive_maps_example() -> int {
    print("🗺️ === الخرائط والقواميس ===");
    print("");
    
    // إنشاء خريطة للطلاب ودرجاتهم
    print("🎓 === خريطة الطلاب والدرجات ===");
    let mut student_grades = create_empty_map();
    
    // إضافة البيانات
    let student_grades = map_insert(student_grades, "أحمد", "85");
    let student_grades = map_insert(student_grades, "فاطمة", "92");
    let student_grades = map_insert(student_grades, "محمد", "78");
    let student_grades = map_insert(student_grades, "عائشة", "95");
    let student_grades = map_insert(student_grades, "علي", "88");
    
    print("📊 خريطة الدرجات:");
    display_map(student_grades);
    
    print("");
    
    // البحث في الخريطة
    print("🔍 === البحث في الخريطة ===");
    let search_student = "فاطمة";
    let grade = map_get(student_grades, search_student);
    if grade != "" {
        print("✅ درجة " + search_student + ": " + grade);
    } else {
        print("❌ لم يتم العثور على " + search_student);
    }
    
    // إنشاء خريطة للمنتجات والأسعار
    print("🛒 === خريطة المنتجات والأسعار ===");
    let mut product_prices = create_empty_map();
    let product_prices = map_insert(product_prices, "لابتوب", "2500");
    let product_prices = map_insert(product_prices, "هاتف", "800");
    let product_prices = map_insert(product_prices, "تابلت", "600");
    let product_prices = map_insert(product_prices, "ساعة ذكية", "300");
    
    print("💰 خريطة الأسعار:");
    display_map(product_prices);
    
    print("");
    
    // إحصائيات الخريطة
    print("📈 === إحصائيات الخرائط ===");
    print("👥 عدد الطلاب: " + string(map_size(student_grades)));
    print("🛒 عدد المنتجات: " + string(map_size(product_prices)));
    
    // الحصول على جميع المفاتيح
    let student_names = map_keys(student_grades);
    print("📝 أسماء الطلاب: " + format_string_list(student_names));
    
    let product_names = map_keys(product_prices);
    print("🏷️ أسماء المنتجات: " + format_string_list(product_names));
    
    return 0;
}

// ========== القوائم المتداخلة ==========
// Nested Lists

fn comprehensive_nested_lists_example() -> int {
    print("🔗 === القوائم المتداخلة ===");
    print("");
    
    // مصفوفة ثنائية الأبعاد (محاكاة)
    print("📊 === مصفوفة الدرجات (3 طلاب × 4 مواد) ===");
    
    // درجات الطلاب في المواد المختلفة
    let student1_grades: Vec<int> = vec![85, 90, 78, 92];
    let student2_grades: Vec<int> = vec![88, 85, 95, 89];
    let student3_grades: Vec<int> = vec![92, 87, 90, 94];
    
    print("👤 الطالب 1: " + format_int_list(student1_grades));
    print("👤 الطالب 2: " + format_int_list(student2_grades));
    print("👤 الطالب 3: " + format_int_list(student3_grades));
    
    // حساب المتوسطات
    let avg1 = calculate_average(student1_grades);
    let avg2 = calculate_average(student2_grades);
    let avg3 = calculate_average(student3_grades);
    
    print("📊 متوسط الطالب 1: " + string(avg1));
    print("📊 متوسط الطالب 2: " + string(avg2));
    print("📊 متوسط الطالب 3: " + string(avg3));
    
    // حساب متوسط كل مادة
    print("");
    print("📚 === متوسط كل مادة ===");
    
    let subject1_avg = (student1_grades[0] + student2_grades[0] + student3_grades[0]) / 3;
    let subject2_avg = (student1_grades[1] + student2_grades[1] + student3_grades[1]) / 3;
    let subject3_avg = (student1_grades[2] + student2_grades[2] + student3_grades[2]) / 3;
    let subject4_avg = (student1_grades[3] + student2_grades[3] + student3_grades[3]) / 3;
    
    print("📖 متوسط المادة 1: " + string(subject1_avg));
    print("📖 متوسط المادة 2: " + string(subject2_avg));
    print("📖 متوسط المادة 3: " + string(subject3_avg));
    print("📖 متوسط المادة 4: " + string(subject4_avg));
    
    return 0;
}

// ========== دوال مساعدة للقوائم ==========
// Helper Functions for Lists

// تنسيق قائمة الأعداد الصحيحة
fn format_int_list(list: Vec<int>) -> string {
    if list.len() == 0 {
        return "[]";
    }
    
    let result = "[";
    for i in 0..list.len() {
        if i > 0 {
            let result = result + ", ";
        }
        let result = result + string(list[i]);
    }
    let result = result + "]";
    return result;
}

// تنسيق قائمة الأعداد العشرية
fn format_float_list(list: Vec<float>) -> string {
    if list.len() == 0 {
        return "[]";
    }
    
    let result = "[";
    for i in 0..list.len() {
        if i > 0 {
            let result = result + ", ";
        }
        let result = result + string(list[i]);
    }
    let result = result + "]";
    return result;
}

// تنسيق قائمة النصوص
fn format_string_list(list: Vec<string>) -> string {
    if list.len() == 0 {
        return "[]";
    }
    
    let result = "[";
    for i in 0..list.len() {
        if i > 0 {
            let result = result + ", ";
        }
        let result = result + "\"" + list[i] + "\"";
    }
    let result = result + "]";
    return result;
}

// تنسيق قائمة القيم المنطقية
fn format_bool_list(list: Vec<bool>) -> string {
    if list.len() == 0 {
        return "[]";
    }
    
    let result = "[";
    for i in 0..list.len() {
        if i > 0 {
            let result = result + ", ";
        }
        let result = result + if list[i] { "true" } else { "false" };
    }
    let result = result + "]";
    return result;
}

// البحث في قائمة الأعداد
fn search_in_int_list(list: Vec<int>, target: int) -> bool {
    for item in list {
        if item == target {
            return true;
        }
    }
    return false;
}

// البحث في قائمة النصوص
fn search_in_string_list(list: Vec<string>, target: string) -> bool {
    for item in list {
        if item == target {
            return true;
        }
    }
    return false;
}

// ترتيب قائمة الأعداد (bubble sort بسيط)
fn sort_int_list(list: Vec<int>) -> Vec<int> {
    let mut sorted = list;
    let n = sorted.len();
    
    for i in 0..n {
        for j in 0..(n-1-i) {
            if sorted[j] > sorted[j+1] {
                let temp = sorted[j];
                sorted[j] = sorted[j+1];
                sorted[j+1] = temp;
            }
        }
    }
    
    return sorted;
}

// ترتيب قائمة النصوص (بسيط)
fn sort_string_list(list: Vec<string>) -> Vec<string> {
    // محاكاة ترتيب بسيط
    return list; // في التطبيق الحقيقي، سيتم ترتيب النصوص
}

// تصفية الأعداد الكبيرة
fn filter_large_numbers(list: Vec<int>, threshold: int) -> Vec<int> {
    let mut result: Vec<int> = Vec::new();
    
    for item in list {
        if item > threshold {
            result.push(item);
        }
    }
    
    return result;
}

// تصفية الأسعار المرتفعة
fn filter_expensive_prices(list: Vec<float>, threshold: float) -> Vec<float> {
    let mut result: Vec<float> = Vec::new();
    
    for item in list {
        if item > threshold {
            result.push(item);
        }
    }
    
    return result;
}

// تصفية الأسماء الطويلة
fn filter_long_names(list: Vec<string>, min_length: int) -> Vec<string> {
    let mut result: Vec<string> = Vec::new();
    
    for item in list {
        if item.len() > min_length {
            result.push(item);
        }
    }
    
    return result;
}

// إنشاء مجموعة فريدة من الأعداد
fn create_unique_set(list: Vec<int>) -> Vec<int> {
    let mut unique: Vec<int> = Vec::new();
    
    for item in list {
        if !search_in_int_list(unique, item) {
            unique.push(item);
        }
    }
    
    return unique;
}

// إنشاء مجموعة فريدة من النصوص
fn create_unique_string_set(list: Vec<string>) -> Vec<string> {
    let mut unique: Vec<string> = Vec::new();
    
    for item in list {
        if !search_in_string_list(unique, item) {
            unique.push(item);
        }
    }
    
    return unique;
}

// تقاطع المجموعات
fn set_intersection(set1: Vec<int>, set2: Vec<int>) -> Vec<int> {
    let mut result: Vec<int> = Vec::new();
    
    for item in set1 {
        if search_in_int_list(set2, item) {
            result.push(item);
        }
    }
    
    return result;
}

// اتحاد المجموعات
fn set_union(set1: Vec<int>, set2: Vec<int>) -> Vec<int> {
    let mut result = set1;
    
    for item in set2 {
        if !search_in_int_list(result, item) {
            result.push(item);
        }
    }
    
    return result;
}

// فرق المجموعات
fn set_difference(set1: Vec<int>, set2: Vec<int>) -> Vec<int> {
    let mut result: Vec<int> = Vec::new();
    
    for item in set1 {
        if !search_in_int_list(set2, item) {
            result.push(item);
        }
    }
    
    return result;
}

// ========== دوال مساعدة للخرائط ==========
// Helper Functions for Maps

// إنشاء خريطة فارغة
fn create_empty_map() -> StringMap {
    let empty_pairs: Vec<KeyValuePair> = Vec::new();
    return StringMap { pairs: empty_pairs };
}

// إدراج في الخريطة
fn map_insert(map: StringMap, key: string, value: string) -> StringMap {
    let mut new_pairs = map.pairs;
    let new_pair = KeyValuePair { key: key, value: value };
    new_pairs.push(new_pair);
    return StringMap { pairs: new_pairs };
}

// البحث في الخريطة
fn map_get(map: StringMap, key: string) -> string {
    for pair in map.pairs {
        if pair.key == key {
            return pair.value;
        }
    }
    return "";
}

// حجم الخريطة
fn map_size(map: StringMap) -> int {
    return map.pairs.len();
}

// الحصول على المفاتيح
fn map_keys(map: StringMap) -> Vec<string> {
    let mut keys: Vec<string> = Vec::new();
    
    for pair in map.pairs {
        keys.push(pair.key);
    }
    
    return keys;
}

// عرض الخريطة
fn display_map(map: StringMap) -> int {
    for pair in map.pairs {
        print("  🔑 " + pair.key + " ➡️ " + pair.value);
    }
    return 0;
}

// حساب المتوسط
fn calculate_average(grades: Vec<int>) -> int {
    if grades.len() == 0 {
        return 0;
    }
    
    let total = 0;
    for grade in grades {
        let total = total + grade;
    }
    
    return total / grades.len();
}

// ========== الدالة الرئيسية ==========
// Main Function

fn main() -> int {
    print("🗂️ === مثال شامل للقوائم والمجموعات === 🗂️");
    print("⚡ استجابة فورية لملاحظات المطورين!");
    print("");
    
    // تشغيل جميع الأمثلة
    comprehensive_lists_example();
    print("");
    
    comprehensive_sets_example();
    print("");
    
    comprehensive_maps_example();
    print("");
    
    comprehensive_nested_lists_example();
    print("");
    
    print("🎊 === انتهى المثال الشامل ===");
    print("✅ تم عرض: القوائم، المجموعات، الخرائط، القوائم المتداخلة");
    print("🔧 العمليات: البحث، الترتيب، التصفية، التقاطع، الاتحاد");
    print("🧬 لغة البيان تدعم جميع هياكل البيانات بشكل كامل!");
    
    return 0;
}
