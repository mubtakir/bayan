// ุชุทุจูู ูุนุงุฏูุฉ ุงูุดูู h(a, b, d) - ุนุฑุถ ุชูุถูุญู
// Shape Equation h(a, b, d) Implementation - Demo

// ========== ุชุทุจูู ูุนุงุฏูุฉ h(a, b, d) ==========
// Implementation of h(a, b, d) Equation

// ุชุทุจูู ูุนุงุฏูุฉ h(a, b, d) ููุง ุฐูุฑุช ูู ba.md
fn evaluate_h_equation(property_a: float, property_b: float, shape_value: float) -> float {
    // ูุนุงุฏูุฉ h(a, b, d) = f(a, b) ร g(d)
    let property_factor = property_a * property_b;
    let shape_factor = 1.0 + shape_value;
    
    return property_factor * shape_factor;
}

// ุญุณุงุจ ุฏุงูุฉ ุงูุดูู ูููุณุชุทูู
fn calculate_rectangle_shape(center_x: float, center_y: float, width: float, height: float, x: float, y: float) -> float {
    if width == 0.0 || height == 0.0 {
        return 0.0;
    }
    
    let dx = (x - center_x) / width;
    let dy = (y - center_y) / height;
    
    return dx * dx + dy * dy;
}

// ุญุณุงุจ ุฏุงูุฉ ุงูุดูู ููุฏุงุฆุฑุฉ
fn calculate_circle_shape(center_x: float, center_y: float, radius: float, x: float, y: float) -> float {
    let dx = x - center_x;
    let dy = y - center_y;
    
    return (dx * dx + dy * dy) - (radius * radius);
}

// ุญุณุงุจ ุฏุงูุฉ ุงูุดูู ูููุซูุซ
fn calculate_triangle_shape(base: float, height: float, x: float, y: float) -> float {
    if base == 0.0 || height == 0.0 {
        return 0.0;
    }
    
    return (x / base) + (y / height);
}

// ุญุณุงุจ ูุณุงุญุฉ ุงููุณุชุทูู
fn calculate_rectangle_area(width: float, height: float) -> float {
    return width * height;
}

// ุญุณุงุจ ูุณุงุญุฉ ุงูุฏุงุฆุฑุฉ
fn calculate_circle_area(radius: float) -> float {
    return 3.14159 * radius * radius;
}

// ุญุณุงุจ ูุณุงุญุฉ ุงููุซูุซ
fn calculate_triangle_area(base: float, height: float) -> float {
    return 0.5 * base * height;
}

// ุชุญููู ุงูุดูู (ุชูุจูุฑ)
fn scale_rectangle(width: float, height: float, scale_factor: float) -> string {
    let new_width = width * scale_factor;
    let new_height = height * scale_factor;
    
    return "ูุณุชุทูู_ุฌุฏูุฏ: ุนุฑุถ=" + string(new_width) + ", ุงุฑุชูุงุน=" + string(new_height);
}

// ุชุญุฑูู ุงูุดูู
fn move_shape(center_x: float, center_y: float, move_x: float, move_y: float) -> string {
    let new_x = center_x + move_x;
    let new_y = center_y + move_y;
    
    return "ูููุน_ุฌุฏูุฏ: (" + string(new_x) + ", " + string(new_y) + ")";
}

// ุฏูุฌ ุฎุตุงุฆุต ุดูููู
fn combine_properties(prop1_a: float, prop1_b: float, prop2_a: float, prop2_b: float) -> string {
    let combined_a = prop1_a + prop2_a;
    let combined_b = prop1_b + prop2_b;
    
    return "ุฎุตุงุฆุต_ูุฏูุฌุฉ: a=" + string(combined_a) + ", b=" + string(combined_b);
}

// ุญุณุงุจ ุงูุฎุตุงุฆุต ุงููุงุดุฆุฉ
fn calculate_emergent_properties(individual_count: int, average_property: float) -> float {
    let synergy_factor = 1.0 + (float(individual_count) * 0.1);
    let interaction_bonus = float(individual_count - 1) * 5.0;
    
    return (float(individual_count) * average_property * synergy_factor) + interaction_bonus;
}

// ========== ุฃูุซูุฉ ุชุทุจูููุฉ ==========
// Application Examples

fn example_basic_h_equation() -> int {
    print("๐ === ูุซุงู ุฃุณุงุณู ููุนุงุฏูุฉ h(a, b, d) ===");
    print("");
    
    // ุฎุตุงุฆุต ุงููุงุฆู
    let property_a = 10.0; // ูุซูุงู: ุงูุทูู
    let property_b = 5.0;  // ูุซูุงู: ุงูุนุฑุถ
    
    // ุญุณุงุจ ุฏุงูุฉ ุงูุดูู ูููุณุชุทูู
    let shape_d = calculate_rectangle_shape(0.0, 0.0, 8.0, 4.0, 2.0, 1.0);
    
    // ุชุทุจูู ูุนุงุฏูุฉ h(a, b, d)
    let result = evaluate_h_equation(property_a, property_b, shape_d);
    
    print("๐งฎ ุชุทุจูู ูุนุงุฏูุฉ h(a, b, d):");
    print("   ุงูุฎุงุตูุฉ a: " + string(property_a));
    print("   ุงูุฎุงุตูุฉ b: " + string(property_b));
    print("   ุฏุงูุฉ ุงูุดูู d: " + string(shape_d));
    print("   ุงููุชูุฌุฉ: h(10, 5, " + string(shape_d) + ") = " + string(result));
    print("");
    
    return 0;
}

fn example_different_shapes() -> int {
    print("๐ท === ุฃุดูุงู ูุฎุชููุฉ ===");
    print("");
    
    let property_a = 15.0;
    let property_b = 8.0;
    let test_x = 1.0;
    let test_y = 1.0;
    
    // ูุณุชุทูู
    let rect_shape = calculate_rectangle_shape(0.0, 0.0, 6.0, 3.0, test_x, test_y);
    let rect_result = evaluate_h_equation(property_a, property_b, rect_shape);
    
    // ุฏุงุฆุฑุฉ
    let circle_shape = calculate_circle_shape(0.0, 0.0, 4.0, test_x, test_y);
    let circle_result = evaluate_h_equation(property_a, property_b, circle_shape);
    
    // ูุซูุซ
    let triangle_shape = calculate_triangle_shape(6.0, 4.0, test_x, test_y);
    let triangle_result = evaluate_h_equation(property_a, property_b, triangle_shape);
    
    print("๐ ููุงุฑูุฉ ุงูุฃุดูุงู:");
    print("   ุงููุณุชุทูู: h(15, 8, ูุณุชุทูู) = " + string(rect_result));
    print("   ุงูุฏุงุฆุฑุฉ: h(15, 8, ุฏุงุฆุฑุฉ) = " + string(circle_result));
    print("   ุงููุซูุซ: h(15, 8, ูุซูุซ) = " + string(triangle_result));
    print("");
    
    return 0;
}

fn example_shape_areas() -> int {
    print("๐ === ูุณุงุญุงุช ุงูุฃุดูุงู ===");
    print("");
    
    // ุญุณุงุจ ูุณุงุญุงุช ูุฎุชููุฉ
    let rect_area = calculate_rectangle_area(8.0, 4.0);
    let circle_area = calculate_circle_area(3.0);
    let triangle_area = calculate_triangle_area(6.0, 4.0);
    
    print("๐ ุงููุณุงุญุงุช:");
    print("   ูุณุชุทูู (8ร4): " + string(rect_area));
    print("   ุฏุงุฆุฑุฉ (ูุตู ูุทุฑ=3): " + string(circle_area));
    print("   ูุซูุซ (ูุงุนุฏุฉ=6ุ ุงุฑุชูุงุน=4): " + string(triangle_area));
    print("");
    
    return 0;
}

fn example_shape_transformations() -> int {
    print("๐ === ุชุญูููุงุช ุงูุฃุดูุงู ===");
    print("");
    
    // ุดูู ุฃุตูู
    let original_width = 4.0;
    let original_height = 2.0;
    let original_area = calculate_rectangle_area(original_width, original_height);
    
    print("๐ ุงูุดูู ุงูุฃุตูู:");
    print("   ูุณุชุทูู: ุนุฑุถ=" + string(original_width) + ", ุงุฑุชูุงุน=" + string(original_height));
    print("   ุงููุณุงุญุฉ: " + string(original_area));
    print("");
    
    // ุชูุจูุฑ ุงูุดูู
    let scaled_shape = scale_rectangle(original_width, original_height, 2.0);
    let scaled_area = calculate_rectangle_area(original_width * 2.0, original_height * 2.0);
    
    print("๐ ุจุนุฏ ุงูุชูุจูุฑ (ร2):");
    print("   " + scaled_shape);
    print("   ุงููุณุงุญุฉ ุงูุฌุฏูุฏุฉ: " + string(scaled_area));
    print("");
    
    // ุชุญุฑูู ุงูุดูู
    let moved_shape = move_shape(0.0, 0.0, 3.0, 2.0);
    
    print("โก๏ธ ุจุนุฏ ุงูุชุญุฑูู:");
    print("   " + moved_shape);
    print("");
    
    return 0;
}

fn example_composite_wall() -> int {
    print("๐งฑ === ุงูุฌุฏุงุฑ ุงููุฑูุจ (ุชุทุจูู ba.md) ===");
    print("");
    
    // ูุจูุงุช ูุฑุฏูุฉ
    let brick_width = 2.0;
    let brick_height = 1.0;
    let brick_area = calculate_rectangle_area(brick_width, brick_height);
    
    let brick_count = 5;
    let total_individual_area = float(brick_count) * brick_area;
    
    print("๐๏ธ ุงููุจูุงุช ุงููุฑุฏูุฉ:");
    print("   ุนุฏุฏ ุงููุจูุงุช: " + string(brick_count));
    print("   ูุณุงุญุฉ ูู ูุจูุฉ: " + string(brick_area));
    print("   ุงููุณุงุญุฉ ุงูุฅุฌูุงููุฉ ุงููุฑุฏูุฉ: " + string(total_individual_area));
    print("");
    
    // ุงูุฎุตุงุฆุต ุงููุงุดุฆุฉ
    let emergent_properties = calculate_emergent_properties(brick_count, brick_area);
    let emergent_bonus = emergent_properties - total_individual_area;
    
    print("๐ ุงูุฌุฏุงุฑ ุงููุฑูุจ:");
    print("   ุงูุฎุตุงุฆุต ุงููุงุดุฆุฉ: " + string(emergent_properties));
    print("   ุงูููุงูุฃุฉ ุงููุงุดุฆุฉ: " + string(emergent_bonus));
    print("   ุงููุณุจุฉ: " + string((emergent_properties / total_individual_area) * 100.0) + "%");
    print("");
    
    print("๐ก ููุงุญุธุฉ: ุฎุตุงุฆุต ุงูุฌุฏุงุฑ ุฃูุจุฑ ูู ูุฌููุน ุฎุตุงุฆุต ุงููุจูุงุช!");
    
    return 0;
}

fn example_real_world_applications() -> int {
    print("๐ === ุชุทุจููุงุช ูู ุงูุนุงูู ุงูุญูููู ===");
    print("");
    
    // ูุซุงู 1: ูุญูุฏ ูุงููุฏุฑุณุฉ
    print("๐จโ๐ ูุญูุฏ ูุงููุฏุฑุณุฉ:");
    let mohamed_age = 25.0;
    let mohamed_weight = 70.0;
    let school_shape = calculate_rectangle_shape(100.0, 50.0, 200.0, 100.0, 150.0, 75.0);
    let mohamed_at_school = evaluate_h_equation(mohamed_age, mohamed_weight, school_shape);
    
    print("   ูุญูุฏ: ุนูุฑ=" + string(mohamed_age) + ", ูุฒู=" + string(mohamed_weight));
    print("   ุงููุฏุฑุณุฉ: ูุจูู ูุณุชุทูู");
    print("   h(ูุญูุฏ, ุงููุฏุฑุณุฉ) = " + string(mohamed_at_school));
    print("");
    
    // ูุซุงู 2: ุงูุทูู ูุงูุญููุจ
    print("๐ฅ ุงูุทูู ูุงูุญููุจ:");
    let child_age = 5.0;
    let child_weight = 20.0;
    let milk_shape = calculate_circle_shape(0.0, 0.0, 3.0, 1.0, 1.0);
    let child_with_milk = evaluate_h_equation(child_age, child_weight, milk_shape);
    
    print("   ุงูุทูู: ุนูุฑ=" + string(child_age) + ", ูุฒู=" + string(child_weight));
    print("   ุงูุญููุจ: ููุจ ุฏุงุฆุฑู");
    print("   h(ุงูุทูู, ุงูุญููุจ) = " + string(child_with_milk));
    print("");
    
    // ูุซุงู 3: ุฏูุฌ ุงูุฎุตุงุฆุต
    print("๐ ุฏูุฌ ุงูุฎุตุงุฆุต:");
    let combined = combine_properties(mohamed_age, mohamed_weight, child_age, child_weight);
    print("   " + combined);
    print("");
    
    return 0;
}

fn example_mathematical_beauty() -> int {
    print("โจ === ุฌูุงู ุงูุฑูุงุถูุงุช ูู h(a, b, d) ===");
    print("");
    
    // ุฅุธูุงุฑ ููู ุชุชุบูุฑ ุงููุชูุฌุฉ ูุน ุชุบูุฑ ุงููุนุงููุงุช
    let base_a = 10.0;
    let base_b = 5.0;
    
    print("๐งฎ ุชุฃุซูุฑ ุชุบููุฑ ุงููุนุงููุงุช:");
    
    // ุชุบููุฑ a
    let result1 = evaluate_h_equation(base_a, base_b, 1.0);
    let result2 = evaluate_h_equation(base_a * 2.0, base_b, 1.0);
    print("   ูุถุงุนูุฉ a: " + string(result1) + " โ " + string(result2));
    
    // ุชุบููุฑ b
    let result3 = evaluate_h_equation(base_a, base_b * 2.0, 1.0);
    print("   ูุถุงุนูุฉ b: " + string(result1) + " โ " + string(result3));
    
    // ุชุบููุฑ d
    let result4 = evaluate_h_equation(base_a, base_b, 2.0);
    print("   ูุถุงุนูุฉ d: " + string(result1) + " โ " + string(result4));
    print("");
    
    print("๐ ุงููุนุงุฏูุฉ h(a, b, d) ุชูุธูุฑ ููู ุชุชูุงุนู ุงูุฎุตุงุฆุต ูุน ุงูุดูู!");
    
    return 0;
}

// ========== ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ==========
// Main Function

fn main() -> int {
    print("๐ === ูุนุงุฏูุฉ ุงูุดูู h(a, b, d) - ุนุฑุถ ุชูุถูุญู === ๐");
    print("โก ุชุทุจูู ูุจุงุดุฑ ููุง ุฐูุฑุชู ูู ba.md");
    print("๐งฎ ุญูุซ a, b ูู ุงูุฎุตุงุฆุต ู d ูู ุฏุงูุฉ ุงูุดูู");
    print("");
    
    // ุชุดุบูู ุงูุฃูุซูุฉ
    example_basic_h_equation();
    example_different_shapes();
    example_shape_areas();
    example_shape_transformations();
    example_composite_wall();
    example_real_world_applications();
    example_mathematical_beauty();
    
    print("๐ === ุงูุชูู ุงูุนุฑุถ ุงูุชูุถูุญู ===");
    print("โ ุชู ุชุทุจูู: ูุนุงุฏูุฉ h(a, b, d) ุจุงููุงูู");
    print("๐ ุฏุงูุฉ ุงูุดูู d ูุทุจูุฉ ููุง ุทูุจุช ูู ba.md");
    print("๐งฑ ุงูุฃุดูุงู ุงููุฑูุจุฉ ูุงูุฎุตุงุฆุต ุงููุงุดุฆุฉ");
    print("๐ ุชุทุจููุงุช ูู ุงูุนุงูู ุงูุญูููู");
    print("๐งฌ ูุบุฉ ุงูุจูุงู - ุญูุซ ุชูุชูู ุงูุฑูุงุถูุงุช ุจุงููุงูุน!");
    
    return 0;
}
