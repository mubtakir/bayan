// الدوال الكاملة - مثال شامل بدون إعادة تعيين
// Complete Functions - Comprehensive example without reassignment

// دوال العمليات الأساسية
fn add_two_numbers(a: int, b: int) -> int {
    return a + b;
}

fn subtract_two_numbers(a: int, b: int) -> int {
    return a - b;
}

fn multiply_two_numbers(a: int, b: int) -> int {
    return a * b;
}

fn divide_two_numbers(a: int, b: int) -> int {
    if b != 0 {
        return a / b;
    }
    return 0;
}

// دوال المقارنة
fn find_maximum_of_two(a: int, b: int) -> int {
    if a > b {
        return a;
    }
    return b;
}

fn find_minimum_of_two(a: int, b: int) -> int {
    if a < b {
        return a;
    }
    return b;
}

fn get_absolute_value(x: int) -> int {
    if x < 0 {
        return -x;
    }
    return x;
}

// دوال التحقق
fn check_if_positive(n: int) -> bool {
    return n > 0;
}

fn check_if_negative(n: int) -> bool {
    return n < 0;
}

fn check_if_zero(n: int) -> bool {
    return n == 0;
}

fn check_if_equal(a: int, b: int) -> bool {
    return a == b;
}

fn check_if_greater(a: int, b: int) -> bool {
    return a > b;
}

// دوال القوة والحسابات
fn calculate_square_of_number(n: int) -> int {
    return n * n;
}

fn calculate_cube_of_number(n: int) -> int {
    return n * n * n;
}

fn calculate_double_of_number(n: int) -> int {
    return n * 2;
}

fn calculate_half_of_number(n: int) -> int {
    return n / 2;
}

fn calculate_triple_of_number(n: int) -> int {
    return n * 3;
}

// دوال الحسابات الهندسية
fn calculate_rectangle_area(width: int, height: int) -> int {
    return width * height;
}

fn calculate_rectangle_perimeter(width: int, height: int) -> int {
    return (width + height) * 2;
}

fn calculate_triangle_area(base: int, height: int) -> int {
    return (base * height) / 2;
}

fn calculate_square_area(side: int) -> int {
    return side * side;
}

fn calculate_square_perimeter(side: int) -> int {
    return side * 4;
}

fn calculate_circle_area_approximate(radius: int) -> int {
    return 3 * radius * radius; // π ≈ 3
}

fn calculate_circle_circumference_approximate(radius: int) -> int {
    return 6 * radius; // 2π ≈ 6
}

// دوال التحويل
fn convert_celsius_to_fahrenheit(celsius: int) -> int {
    return (celsius * 9) / 5 + 32;
}

fn convert_fahrenheit_to_celsius(fahrenheit: int) -> int {
    return ((fahrenheit - 32) * 5) / 9;
}

fn convert_meters_to_centimeters(meters: int) -> int {
    return meters * 100;
}

fn convert_centimeters_to_meters(centimeters: int) -> int {
    return centimeters / 100;
}

fn convert_hours_to_minutes(hours: int) -> int {
    return hours * 60;
}

fn convert_minutes_to_seconds(minutes: int) -> int {
    return minutes * 60;
}

fn convert_kilograms_to_grams(kg: int) -> int {
    return kg * 1000;
}

fn convert_grams_to_kilograms(grams: int) -> int {
    return grams / 1000;
}

// دوال التصنيف
fn classify_number_sign(n: int) -> string {
    if n > 0 {
        return "موجب";
    }
    if n < 0 {
        return "سالب";
    }
    return "صفر";
}

fn classify_student_grade_level(grade: int) -> string {
    if grade >= 90 {
        return "ممتاز";
    }
    if grade >= 80 {
        return "جيد جداً";
    }
    if grade >= 70 {
        return "جيد";
    }
    if grade >= 60 {
        return "مقبول";
    }
    return "راسب";
}

fn classify_person_age_group(age: int) -> string {
    if age < 13 {
        return "طفل";
    }
    if age < 20 {
        return "مراهق";
    }
    if age < 60 {
        return "بالغ";
    }
    return "كبير السن";
}

fn classify_temperature_range(temp: int) -> string {
    if temp < 0 {
        return "متجمد";
    }
    if temp < 10 {
        return "بارد جداً";
    }
    if temp < 20 {
        return "بارد";
    }
    if temp < 30 {
        return "معتدل";
    }
    if temp < 40 {
        return "دافئ";
    }
    return "حار";
}

// دوال الحسابات المالية
fn calculate_simple_interest_amount(principal: int, rate: int, time: int) -> int {
    return (principal * rate * time) / 100;
}

fn calculate_total_amount_with_interest(principal: int, interest: int) -> int {
    return principal + interest;
}

fn calculate_discount_amount_from_price(price: int, discount_percent: int) -> int {
    return (price * discount_percent) / 100;
}

fn calculate_final_price_after_discount(price: int, discount: int) -> int {
    return price - discount;
}

fn calculate_tax_amount_from_price(price: int, tax_percent: int) -> int {
    return (price * tax_percent) / 100;
}

fn calculate_final_price_with_tax(price: int, tax: int) -> int {
    return price + tax;
}

fn calculate_tip_amount(bill: int, tip_percent: int) -> int {
    return (bill * tip_percent) / 100;
}

fn calculate_total_bill_with_tip(bill: int, tip: int) -> int {
    return bill + tip;
}

// دوال الإحصاء
fn calculate_average_of_two_numbers(a: int, b: int) -> int {
    return (a + b) / 2;
}

fn calculate_average_of_three_numbers(a: int, b: int, c: int) -> int {
    return (a + b + c) / 3;
}

fn calculate_sum_of_two_numbers(a: int, b: int) -> int {
    return a + b;
}

fn calculate_sum_of_three_numbers(a: int, b: int, c: int) -> int {
    return a + b + c;
}

fn calculate_range_between_numbers(max_val: int, min_val: int) -> int {
    return max_val - min_val;
}

fn calculate_sum_of_squares(a: int, b: int) -> int {
    return (a * a) + (b * b);
}

fn calculate_product_of_squares(a: int, b: int) -> int {
    return (a * a) * (b * b);
}

// دوال التحقق من النطاقات
fn is_grade_in_valid_range(grade: int) -> bool {
    if grade >= 0 {
        if grade <= 100 {
            return true;
        }
    }
    return false;
}

fn is_age_adult_range(age: int) -> bool {
    return age >= 18;
}

fn is_age_senior_range(age: int) -> bool {
    return age >= 60;
}

fn is_grade_passing_level(grade: int) -> bool {
    return grade >= 60;
}

fn is_percentage_valid_range(percent: int) -> bool {
    if percent >= 0 {
        if percent <= 100 {
            return true;
        }
    }
    return false;
}

// دوال الحسابات المتقدمة
fn calculate_power_of_two_to_exponent(exponent: int) -> int {
    if exponent == 0 {
        return 1;
    }
    if exponent == 1 {
        return 2;
    }
    if exponent == 2 {
        return 4;
    }
    if exponent == 3 {
        return 8;
    }
    if exponent == 4 {
        return 16;
    }
    if exponent == 5 {
        return 32;
    }
    return 64;
}

fn calculate_factorial_of_number(n: int) -> int {
    if n <= 1 {
        return 1;
    }
    if n == 2 {
        return 2;
    }
    if n == 3 {
        return 6;
    }
    if n == 4 {
        return 24;
    }
    if n == 5 {
        return 120;
    }
    if n == 6 {
        return 720;
    }
    return 5040;
}

// دوال المقارنة المتقدمة
fn find_maximum_of_three_numbers(a: int, b: int, c: int) -> int {
    if a >= b {
        if a >= c {
            return a;
        }
        return c;
    }
    if b >= c {
        return b;
    }
    return c;
}

fn find_minimum_of_three_numbers(a: int, b: int, c: int) -> int {
    if a <= b {
        if a <= c {
            return a;
        }
        return c;
    }
    if b <= c {
        return b;
    }
    return c;
}

fn find_maximum_of_four_numbers(a: int, b: int, c: int, d: int) -> int {
    let max_abc = a;
    if b > max_abc {
        max_abc = b;
    }
    if c > max_abc {
        max_abc = c;
    }
    if d > max_abc {
        return d;
    }
    return max_abc;
}

fn main() -> int {
    // تعريف المتغيرات الأساسية
    let number_one = 15;
    let number_two = 8;
    let number_three = 12;
    let number_four = 20;
    let number_five = 25;
    
    // العمليات الحسابية الأساسية
    let addition_result = number_one + number_two;
    let subtraction_result = number_one - number_two;
    let multiplication_result = number_one * number_two;
    let division_result = number_one / number_two;
    
    // عمليات المقارنة
    let maximum_of_two = number_one;
    if number_two > number_one {
        maximum_of_two = number_two;
    }
    
    let minimum_of_two = number_one;
    if number_two < number_one {
        minimum_of_two = number_two;
    }
    
    let absolute_of_first = number_one;
    if number_one < 0 {
        absolute_of_first = -number_one;
    }
    
    // عمليات التحقق
    let is_first_positive = number_one > 0;
    let is_second_negative = number_two < 0;
    let is_third_zero = number_three == 0;
    let are_first_second_equal = number_one == number_two;
    let is_first_greater_than_second = number_one > number_two;
    
    // عمليات القوة والحسابات
    let square_of_first = number_one * number_one;
    let cube_of_second = number_two * number_two * number_two;
    let double_of_third = number_three * 2;
    let half_of_fourth = number_four / 2;
    let triple_of_fifth = number_five * 3;
    
    // الحسابات الهندسية
    let rectangle_width = 6;
    let rectangle_height = 4;
    let rectangle_area_result = rectangle_width * rectangle_height;
    let rectangle_perimeter_result = (rectangle_width + rectangle_height) * 2;
    
    let triangle_base = 8;
    let triangle_height = 5;
    let triangle_area_result = (triangle_base * triangle_height) / 2;
    
    let square_side = 7;
    let square_area_result = square_side * square_side;
    let square_perimeter_result = square_side * 4;
    
    let circle_radius = 3;
    let circle_area_result = 3 * circle_radius * circle_radius;
    let circle_circumference_result = 6 * circle_radius;
    
    // التحويلات
    let temperature_celsius = 25;
    let temperature_fahrenheit = (temperature_celsius * 9) / 5 + 32;
    
    let distance_meters = 5;
    let distance_centimeters = distance_meters * 100;
    
    let time_hours = 3;
    let time_minutes = time_hours * 60;
    let time_seconds = time_minutes * 60;
    
    let weight_kilograms = 70;
    let weight_grams = weight_kilograms * 1000;
    
    // الحسابات المالية
    let loan_principal = 1000;
    let interest_rate = 5;
    let loan_time = 2;
    let simple_interest_result = (loan_principal * interest_rate * loan_time) / 100;
    let total_amount_result = loan_principal + simple_interest_result;
    
    let product_price = 200;
    let discount_percentage = 15;
    let discount_amount_result = (product_price * discount_percentage) / 100;
    let discounted_price_result = product_price - discount_amount_result;
    
    let base_price = 100;
    let tax_percentage = 10;
    let tax_amount_result = (base_price * tax_percentage) / 100;
    let price_with_tax_result = base_price + tax_amount_result;
    
    let bill_amount = 150;
    let tip_percentage = 15;
    let tip_amount_result = (bill_amount * tip_percentage) / 100;
    let total_bill_result = bill_amount + tip_amount_result;
    
    // الإحصاء
    let grade_one = 85;
    let grade_two = 90;
    let grade_three = 78;
    let total_grades_result = grade_one + grade_two + grade_three;
    let average_grade_result = total_grades_result / 3;
    
    let data_point_one = 10;
    let data_point_two = 15;
    let data_point_three = 20;
    let data_point_four = 25;
    let data_point_five = 30;
    let data_sum_result = data_point_one + data_point_two + data_point_three + data_point_four + data_point_five;
    let data_average_result = data_sum_result / 5;
    let data_range_result = data_point_five - data_point_one;
    
    // التحقق من النطاقات والشروط
    let is_grade_valid = false;
    if grade_one >= 0 {
        if grade_one <= 100 {
            is_grade_valid = true;
        }
    }
    
    let is_student_passing = average_grade_result >= 60;
    let is_student_excellent = average_grade_result >= 90;
    let is_student_good = average_grade_result >= 80;
    
    let student_age = 20;
    let is_student_adult = student_age >= 18;
    let is_student_senior = student_age >= 60;
    let is_student_teenager = student_age < 20;
    
    // الحسابات المتقدمة
    let power_exponent = 4;
    let power_of_two_result = 1;
    if power_exponent == 0 {
        power_of_two_result = 1;
    }
    if power_exponent == 1 {
        power_of_two_result = 2;
    }
    if power_exponent == 2 {
        power_of_two_result = 4;
    }
    if power_exponent == 3 {
        power_of_two_result = 8;
    }
    if power_exponent == 4 {
        power_of_two_result = 16;
    }
    
    let factorial_number = 5;
    let factorial_result = 1;
    if factorial_number == 1 {
        factorial_result = 1;
    }
    if factorial_number == 2 {
        factorial_result = 2;
    }
    if factorial_number == 3 {
        factorial_result = 6;
    }
    if factorial_number == 4 {
        factorial_result = 24;
    }
    if factorial_number == 5 {
        factorial_result = 120;
    }
    
    // المقارنة المتقدمة
    let max_of_three_result = number_one;
    if number_two > max_of_three_result {
        max_of_three_result = number_two;
    }
    if number_three > max_of_three_result {
        max_of_three_result = number_three;
    }
    
    let min_of_three_result = number_one;
    if number_two < min_of_three_result {
        min_of_three_result = number_two;
    }
    if number_three < min_of_three_result {
        min_of_three_result = number_three;
    }
    
    // حسابات إضافية ومتنوعة
    let sum_of_squares_result = (number_one * number_one) + (number_two * number_two);
    let product_of_cubes_result = (number_one * number_one * number_one) * (number_two * number_two * number_two);
    let average_of_all_numbers = (number_one + number_two + number_three + number_four + number_five) / 5;
    let difference_of_squares = (number_one * number_one) - (number_two * number_two);
    
    // النتيجة النهائية الشاملة
    let comprehensive_result = addition_result + multiplication_result + rectangle_area_result + simple_interest_result + average_grade_result + power_of_two_result + factorial_result;
    
    return comprehensive_result;
}
