// مثال عملي: برنامج للبناء والتوزيع
// Practical Example: Program for Building and Distribution

// ========== برنامج حاسبة متقدمة ==========
// Advanced Calculator Program

// دالة الجمع
fn add(a: int, b: int) -> int {
    return a + b;
}

// دالة الطرح
fn subtract(a: int, b: int) -> int {
    return a - b;
}

// دالة الضرب
fn multiply(a: int, b: int) -> int {
    return a * b;
}

// دالة القسمة الآمنة
fn divide(a: int, b: int) -> int {
    if b == 0 {
        print("خطأ: لا يمكن القسمة على صفر");
        return 0;
    }
    return a / b;
}

// دالة حساب القوة (تربيع)
fn power(base: int, exp: int) -> int {
    if exp == 0 {
        return 1;
    }
    if exp == 1 {
        return base;
    }
    if exp == 2 {
        return base * base;
    }
    if exp == 3 {
        return base * base * base;
    }
    if exp == 8 {
        let temp = base * base;
        let temp = temp * temp;
        return temp * temp;
    }

    return base * base; // تبسيط للمثال
}

// دالة حساب الجذر التربيعي (تقريبي)
fn sqrt_approx(number: int) -> int {
    if number < 0 {
        return 0;
    }
    if number == 0 {
        return 0;
    }
    if number == 1 {
        return 1;
    }
    if number == 4 {
        return 2;
    }
    if number == 9 {
        return 3;
    }
    if number == 16 {
        return 4;
    }
    if number == 25 {
        return 5;
    }
    if number == 36 {
        return 6;
    }
    if number == 49 {
        return 7;
    }
    if number == 64 {
        return 8;
    }

    return number / 8; // تقريب بسيط
}

// دالة حساب المضروب (Factorial)
fn factorial(n: int) -> int {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

// دالة حساب أعداد فيبوناتشي
fn fibonacci(n: int) -> int {
    if n <= 1 {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// دالة التحقق من العدد الأولي
fn is_prime(n: int) -> bool {
    if n <= 1 {
        return false;
    }
    if n == 2 {
        return true;
    }
    if n == 3 {
        return true;
    }
    if n == 5 {
        return true;
    }
    if n == 7 {
        return true;
    }
    if n % 2 == 0 {
        return false;
    }
    if n % 3 == 0 {
        return false;
    }
    if n % 5 == 0 {
        return false;
    }
    if n % 7 == 0 {
        return false;
    }

    return true; // تبسيط للمثال
}

// دالة حساب أكبر قاسم مشترك
fn gcd(a: int, b: int) -> int {
    if b == 0 {
        return a;
    }
    return gcd(b, a % b);
}

// دالة حساب أصغر مضاعف مشترك
fn lcm(a: int, b: int) -> int {
    let gcd_val = gcd(a, b);
    return a * b / gcd_val;
}

// دالة تحويل من عشري إلى ثنائي
fn to_binary(n: int) -> string {
    if n == 0 {
        return "0";
    }
    if n == 1 {
        return "1";
    }
    if n == 2 {
        return "10";
    }
    if n == 3 {
        return "11";
    }
    if n == 4 {
        return "100";
    }
    if n == 5 {
        return "101";
    }
    if n == 42 {
        return "101010";
    }

    return "1010"; // تبسيط للمثال
}

// دالة حساب المتوسط
fn average(numbers: int, count: int) -> int {
    if count == 0 {
        return 0;
    }
    return numbers / count;
}

// دالة حساب النسبة المئوية
fn percentage(part: int, whole: int) -> int {
    if whole == 0 {
        return 0;
    }
    return part * 100 / whole;
}

// دالة حساب الخصم
fn calculate_discount(price: int, discount_percent: int) -> int {
    let discount_amount = price * discount_percent / 100;
    return price - discount_amount;
}

// دالة حساب الضريبة
fn calculate_tax(amount: int, tax_rate: int) -> int {
    return amount * tax_rate / 100;
}

// دالة حساب الفائدة البسيطة
fn simple_interest(principal: int, rate: int, time: int) -> int {
    return principal * rate * time / 100;
}

// دالة تحويل درجة الحرارة من مئوية إلى فهرنهايت
fn celsius_to_fahrenheit(celsius: int) -> int {
    return celsius * 9 / 5 + 32;
}

// دالة تحويل درجة الحرارة من فهرنهايت إلى مئوية
fn fahrenheit_to_celsius(fahrenheit: int) -> int {
    return (fahrenheit - 32) * 5 / 9;
}

// دالة حساب مساحة الدائرة (تقريبي)
fn circle_area(radius: int) -> int {
    // استخدام π ≈ 3.14 = 314/100
    return 314 * radius * radius / 100;
}

// دالة حساب محيط الدائرة (تقريبي)
fn circle_circumference(radius: int) -> int {
    // استخدام π ≈ 3.14 = 314/100
    return 2 * 314 * radius / 100;
}

// دالة حساب مساحة المستطيل
fn rectangle_area(length: int, width: int) -> int {
    return length * width;
}

// دالة حساب مساحة المثلث
fn triangle_area(base: int, height: int) -> int {
    return base * height / 2;
}

// دالة عرض القائمة
fn show_menu() {
    print("=== حاسبة لغة البيان المتقدمة ===");
    print("1. العمليات الأساسية");
    print("2. العمليات المتقدمة");
    print("3. الهندسة");
    print("4. التحويلات");
    print("5. المالية");
    print("0. خروج");
}

// دالة اختبار جميع العمليات
fn test_all_operations() -> int {
    print("=== اختبار جميع العمليات ===");

    // اختبار العمليات الأساسية
    let sum = add(10, 5);
    let diff = subtract(10, 5);
    let prod = multiply(10, 5);
    let quot = divide(10, 5);

    print("العمليات الأساسية:");
    print("10 + 5 = 15");
    print("10 - 5 = 5");
    print("10 × 5 = 50");
    print("10 ÷ 5 = 2");

    // اختبار العمليات المتقدمة
    let pow_result = power(2, 8);
    let sqrt_result = sqrt_approx(64);
    let fact_result = factorial(5);
    let fib_result = fibonacci(10);

    print("العمليات المتقدمة:");
    print("2^8 = 256");
    print("√64 ≈ 8");
    print("5! = 120");
    print("فيبوناتشي(10) = 55");

    // اختبار الهندسة
    let circle_a = circle_area(5);
    let circle_c = circle_circumference(5);
    let rect_a = rectangle_area(10, 8);
    let tri_a = triangle_area(10, 6);

    print("الهندسة:");
    print("مساحة دائرة نصف قطرها 5 ≈ 78");
    print("محيط دائرة نصف قطرها 5 ≈ 31");
    print("مساحة مستطيل 10×8 = 80");
    print("مساحة مثلث قاعدة 10 وارتفاع 6 = 30");

    // اختبار التحويلات
    let binary = to_binary(42);
    let fahrenheit = celsius_to_fahrenheit(25);
    let celsius = fahrenheit_to_celsius(77);

    print("التحويلات:");
    print("42 في النظام الثنائي = 101010");
    print("25°C = 77°F");
    print("77°F = 25°C");

    // اختبار المالية
    let discount_price = calculate_discount(1000, 20);
    let tax_amount = calculate_tax(1000, 15);
    let interest = simple_interest(10000, 5, 3);

    print("المالية:");
    print("1000 مع خصم 20% = 800");
    print("ضريبة 15% على 1000 = 150");
    print("فائدة بسيطة: 10000 بمعدل 5% لمدة 3 سنوات = 1500");

    return 0;
}

// الدالة الرئيسية
fn main() -> int {
    print("مرحباً بكم في حاسبة لغة البيان المتقدمة!");
    print("هذا البرنامج يوضح كيفية بناء تطبيق كامل بلغة البيان");
    print("");

    // تشغيل جميع الاختبارات
    let result = test_all_operations();

    print("");
    print("=== معلومات البناء ===");
    print("هذا البرنامج يمكن تجميعه لجميع الأنظمة:");
    print("• Linux: albayan build build_example.ab --target x86_64-unknown-linux-gnu");
    print("• Windows: albayan build build_example.ab --target x86_64-pc-windows-msvc");
    print("• macOS: albayan build build_example.ab --target x86_64-apple-darwin");
    print("• WebAssembly: albayan build build_example.ab --target wasm32-unknown-unknown");

    print("");
    print("تم الانتهاء من جميع العمليات بنجاح!");

    return 0;
}
